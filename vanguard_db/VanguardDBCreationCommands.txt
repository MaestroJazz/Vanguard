/*
 *
 *  File: 	VanguardDBCreationCommands.txt	
 *
 *  Purpose: 	Documents the commands for creating the 
 *		2023 Scouting app Databse within psql
 *  
 *  Author: 	Cordelia Notbohm
 *  Version: 	1.1.0
 *  Date:    	3/3/23
 *
 */


-------------------------------------------------------
--     Creating an empty DB and connecting to it     --
-------------------------------------------------------

CREATE DATABASE scoutingdb2023;
\c scoutingdb2023


------------------------------------------------------
--      Creating the tables/entities in the DB      --
------------------------------------------------------

/*
 * Table:	Robot
 * Description:	An entity table that represents a robot 
 *		that was build by an FRC team to compete in matches. 
 *		We are using the team's designated team number as an 
 *		identifier. In this database a team and a robot are 
 *		considered synonymous, and for naming consistency the word
 *		robot is used to represent both the robot and the team that 
 *		created the robot. The name and number feilds represent the 
 *		name and number of the team that created the robot - so 
 *		2930 the Sonic Squirrels is a robot in the database 
 * 		
 */

CREATE TABLE Robot (
	TBAKey 		varchar(10) 	NOT NULL,
	number 		varchar(6) 	NOT NULL UNIQUE,
	name 		varchar(60) 	NOT NULL,

	PRIMARY KEY 	(TBAKey)
);



/*
 * Table:	Competition
 * Description:	An entity table that represents a multi-day event 
 *		in which multiple teams come to a venue to compete 
 *		in matches. We are using a competition's FIRST
 *		event key as a unique identifier 
 */

CREATE TABLE Competition (
	TBAKey 		varchar(12) 	NOT NULL,
	name 		varchar(120) 	NOT NULL, 
	startDate 	date 		NOT NULL, 

	PRIMARY KEY 	(TBAKey)
);



/*
 * Table:	MatchType
 * Description:	A domain table used to store the values that 
 *		represent the different rounds of matchs that occur
 *		at a given compeition (Qualification, Playoff
 *		Final) 
 */

CREATE TABLE MatchType (
	ID 		varchar(2) 	NOT NULL,
	name 		varchar(20) 	NOT NULL UNIQUE,

	PRIMARY KEY 	(ID)
);



/*
 * Table:	Match
 * Description:	An entity table that represents when six robots compete, 
 *		three blue alliance robots against three red alliance robots, 
 *		each trying to score the most points.
 */

CREATE TABLE Match (
	TBAKey  		varchar(20) 	NOT NULL,
	competitionTBAKey 	varchar(12) 	NOT NULL,
	matchTypeID 		varchar(2) 	NOT NULL,
	number 			varchar(3) 	NOT NULL,

	PRIMARY KEY 	(TBAKey),
	FOREIGN KEY 	(competitionTBAKey) REFERENCES Competition(TBAKey)
			DEFERRABLE INITIALLY DEFERRED,
 	FOREIGN KEY 	(matchTypeID) REFERENCES MatchType(ID)
			DEFERRABLE INITIALLY DEFERRED
);



/*
 * Table:	AllianceStation
 * Description:	A domain table used to store the six alliance station/
 *		driver stations that a robot could be assigned to compete
 *		from in a given match. This is the spot that the drive team 
 *		controls the robot from and the alliance that the team is on
 */

CREATE TABLE AllianceStation (
	ID 		char(2) 	NOT NULL,
	color 		varchar(10) 	NOT NULL,
	number 		char(1) 	NOT NULL,

	PRIMARY KEY 	(ID)
);



/*
 * Table:	GamePiece
 * Description:	A domain table used to store the values that repesent 
 *		the different game pieces that a robot can manipulate
 *		to score points for the current year's game
 */

CREATE TABLE GamePiece (
	ID 		varchar(2) 	NOT NULL,
	name 		varchar(12) 	NOT NULL UNIQUE,

	PRIMARY KEY 	(ID)
);



/*
 * Table:	MatchPeriod
 * Description:	A domain table used to store the values that represent
 *		the different periods that occur within the match -
 *		teleoperated and autonomous
 */

CREATE TABLE MatchPeriod (
	ID 		varchar(2) 	NOT NULL,
	name 		varchar(15) 	NOT NULL UNIQUE,

	PRIMARY KEY 	(ID)
);



/*
 * Table:	RobotInMatch
 * Description:	An entity table that represents a single 
 *		robot competiting in a given match. This table can be thought of
 *		as the match schedule, it shows which robot play in which 
 *		matches and at which alliance stations
 */

CREATE TABLE RobotInMatch (
	ID 			serial 		NOT NULL,
	matchTBAKey 		varchar(20) 	NOT NULL,
	robotTBAKey 		varchar(10) 	NOT NULL,
	allianceStationID 	char(2) 	NOT NULL,

	CONSTRAINT  	robot_in_match_not_already_entered 
			UNIQUE(matchTBAKey, robotTBAKey, allianceStationID),
	PRIMARY KEY 	(ID),
	FOREIGN KEY 	(matchTBAKey) REFERENCES Match(TBAKey)
			DEFERRABLE INITIALLY DEFERRED,
 	FOREIGN KEY 	(robotTBAKey) REFERENCES Robot(TBAKey)
			DEFERRABLE INITIALLY DEFERRED,
	FOREIGN KEY 	(allianceStationID) REFERENCES AllianceStation(ID)
			DEFERRABLE INITIALLY DEFERRED
);



/*
 * Table:	Scout
 * Description:	An entity table that represents the collection of events that 
 *		a scout logs for a given match. Represents a set of data 
 *		about a single robot compeiting in a given match. 
 *		There could be multiple data sets for a RobotInMatch if two people 
 *              scout the same match 
 */

CREATE TABLE Scout (
	ID 			serial 		NOT NULL,
	RobotInMatchID 		integer 	NOT NULL,
	preloadedPieceID 	varchar(2) 	,
	notes	 		text 		,

	PRIMARY KEY 	(ID),
	FOREIGN KEY 	(RobotInMatchID) REFERENCES RobotInMatch(ID)
			DEFERRABLE INITIALLY DEFERRED		
);



/*
 * Table:	PickupLocation
 * Description:	A domain table which holds the values that represent 
 *		how a robot picks up a game piece and if relevant to 
 * 		the game where the robot picked up the game piece. 
 *		So ground vs. PlayerStation1 vs PlayerStation2 for example.
 */

CREATE TABLE PickupLocation (
	ID 		varchar(2) 	NOT NULL,
	name 		varchar(20) 	NOT NULL UNIQUE,

	PRIMARY KEY 	(ID)
);



/*
 * Table:	PickupGamePieceEvent
 * Description:	An entity table that represents the event of a robot picking
 *		up a game piece during a match. This event will
 *		capture which piece was picked up, at which 
 *		location it was picked up from, and at what point during the 
 *		match the piece was picked up. It references a given 
 *		RobotInMatch's via it's scout to capture who picked it up and at 
 *		which match
 */

CREATE TABLE PickupGamePieceEvent (
	ID 			serial 		NOT NULL,
	scoutID 		integer 	NOT NULL,
	matchPeriodID 		varchar(2) 	NOT NULL,
	gamePieceID 		varchar(2) 	NOT NULL,
	pickupLocationID 	varchar(2) 	NOT NULL,
	timeOccurred 		timestamp 	NOT NULL,

	PRIMARY KEY 	(ID),
	FOREIGN KEY 	(scoutID) REFERENCES Scout(ID)
			DEFERRABLE INITIALLY DEFERRED,
 	FOREIGN KEY 	(matchPeriodID) REFERENCES MatchPeriod(ID)
			DEFERRABLE INITIALLY DEFERRED,
	FOREIGN KEY 	(gamePieceID) REFERENCES GamePiece(ID)
			DEFERRABLE INITIALLY DEFERRED,
	FOREIGN KEY 	(pickupLocationID) REFERENCES PickupLocation(ID)
			DEFERRABLE INITIALLY DEFERRED
);



/*
 * Table:	ScoringLocation
 * Description:	A domain table which holds the values that represent 
 *		where a robot scores a game piece and if relevant to 
 *		the game how the robot scored the game piece. 
 *		So High vs. Medium vs. Low for example.
 */

CREATE TABLE ScoringLocation (
	ID 		varchar(3) 	NOT NULL,
	level 		varchar(10) 	NOT NULL, 
	position 	varchar(20) 	NOT NULL, 

	PRIMARY KEY 	(ID) 
);



/*
 * Table:	ScoreGamePieceEvent
 * Description:	An entity table that represents the event of a robot scoring
 *		a game piece during a match. This event will
 *		capture which piece was scored, at which 
 *		location it was scored at, and at what point during the 
 *		match the piece was scored. It references a given 
 *		RobotInMatch's via it's scout to capture who scored and at 
 * 		which match
 */

CREATE TABLE ScoreGamePieceEvent (
	ID 			serial 		NOT NULL,
	scoutID 		integer 	NOT NULL,
	matchPeriodID 		varchar(2) 	NOT NULL,
	gamePieceID 		varchar(2) 	NOT NULL,
	scoringLocationID 	varchar(3) 	NOT NULL,
	timeOccurred 		timestamp 	NOT NULL,

	PRIMARY KEY 	(ID),
	FOREIGN KEY 	(scoutID) REFERENCES Scout(ID)
			DEFERRABLE INITIALLY DEFERRED,
 	FOREIGN KEY 	(matchPeriodID) REFERENCES MatchPeriod(ID)
			DEFERRABLE INITIALLY DEFERRED,
	FOREIGN KEY 	(gamePieceID) REFERENCES GamePiece(ID)
			DEFERRABLE INITIALLY DEFERRED,
	FOREIGN KEY 	(scoringLocationID) REFERENCES ScoringLocation(ID)
			DEFERRABLE INITIALLY DEFERRED
);



/*
 * Table:	NonGamePieceScoringType
 * Description:	A domain table which holds the values that represent 
 *		all of the ways a robot can score points that does
 *		not involve scoring a game piece. This is typically 
 *		the season's "climb" equivalent as well as any points
 *		a team can get for moving in Auto. This points are
 *		typically only scored once or twice per match
 */

CREATE TABLE NonGamePieceScoringType (
	ID 		varchar(2) 	NOT NULL,
	name 		varchar(20) 	NOT NULL UNIQUE, 

	PRIMARY KEY  	(ID)
);



/*
 * Table:	ScoreWithoutGamePieceEvent
 * Description:	An entity table that represents the event of a robot scoring
 *		points without a game piece during a match. This event will
 *		capture how points were scored, and at what point during the 
 *		match the points were scored. It references a given 
 *		RobotInMatch's via it's scout to capture who scored and at which match
 */

CREATE TABLE ScoreWithoutGamePieceEvent (
	ID 				serial 		NOT NULL,
	scoutID 			integer 	NOT NULL,
	matchPeriodID 			varchar(2) 	NOT NULL,
	nonGamePieceScoringTypeID 	varchar(2) 	NOT NULL,
	timeOccurred 			timestamp 	NOT NULL,

	PRIMARY KEY 	(ID),
	FOREIGN KEY 	(scoutID) REFERENCES Scout(ID)
			DEFERRABLE INITIALLY DEFERRED,
 	FOREIGN KEY 	(matchPeriodID) REFERENCES MatchPeriod(ID)
			DEFERRABLE INITIALLY DEFERRED,
	FOREIGN KEY 	(nonGamePieceScoringTypeID) REFERENCES 
			NonGamePieceScoringType(ID)
			DEFERRABLE INITIALLY DEFERRED
);



/*
 * Table:	FaultType
 * Description:	A domain table which holds the values that represent 
 *		any mistakes or unfavorable actions a robot can make during 
 *		the match. Like getting a foul or falling over.
 */

CREATE TABLE FaultType (
	ID 		varchar(2) 	NOT NULL,
	name 		varchar(20) 	NOT NULL UNIQUE, 

	PRIMARY KEY  	(ID)
);



/*
 * Table:	FaultEvent
 * Description:	An entity table that represents the event of a robot making
 *		a mistake or doing something unfavorable during a match. This 
 *		event will caputure which fault, and at what point during the 
 *		match fault was made. It references a given 
 * 		RobotInMatch's via it's scout to capture who made the mistake 
 * 		and at which match
 */

CREATE TABLE FaultEvent (
	ID 			serial 		NOT NULL,
	scoutID 		integer 	NOT NULL,
	matchPeriodID 		varchar(2) 	NOT NULL,
	faultTypeID 		varchar(2) 	NOT NULL,
	timeOccurred 		timestamp 	NOT NULL,

	PRIMARY KEY 	(ID),
	FOREIGN KEY 	(scoutID) REFERENCES Scout(ID)
			DEFERRABLE INITIALLY DEFERRED,
 	FOREIGN KEY 	(matchPeriodID) REFERENCES MatchPeriod(ID)
			DEFERRABLE INITIALLY DEFERRED,
	FOREIGN KEY 	(faultTypeID) REFERENCES FaultType(ID)
			DEFERRABLE INITIALLY DEFERRED
);



/*
 * Table:	StartFinishType
 * Description:	A domain table which holds the values that represent 
 *		a start and a finish event, for when a scouts starts
 *		or finsihes scouting a match
 */

CREATE TABLE StartFinishType (
	ID 		varchar(2) 	NOT NULL,
	name 		varchar(20) 	NOT NULL UNIQUE, 

	PRIMARY KEY  	(ID)
);



/*
 * Table:	StartFinishEvent
 * Description:	An entity table that represents the event of starting
 *		or finishing scouting a match. This event will capture when 
 *		the event occured. It references a given 
 * 		RobotInMatch's via it's scout to capture which match and robot
 *		it refers to 
 */

CREATE TABLE StartFinishEvent (
	ID 			serial 		NOT NULL,
	scoutID 		integer 	NOT NULL,
	StartFinishTypeID 	varchar(2) 	NOT NULL,
	timeOccurred 		timestamp 	NOT NULL,

	PRIMARY KEY 	(ID),
	FOREIGN KEY 	(scoutID) REFERENCES Scout(ID)
			DEFERRABLE INITIALLY DEFERRED,
	FOREIGN KEY 	(startFinishTypeID) REFERENCES StartFinishType(ID)
			DEFERRABLE INITIALLY DEFERRED
);


------------------------------------------------------------------
--   filling in domain tables with non-season specific values   --
------------------------------------------------------------------

/*
 *	Domain tables hold values that do not change during the 
 *	season. 
 */

/*
 *	The following domain tables have values that are 
 *	not specific to the 2023 Season. However, they could 
 * 	still change in the future if FIRST makes any
 * 	changes to the structure of competitions 
 */


/*
 * 	AllianceStation values 	
 */
INSERT INTO AllianceStation (ID, color, number)
VALUES  ('R1', 'Red', '1'),
	('R2', 'Red', '2'),
	('R3', 'Red', '3'),
	('B1', 'Blue', '1'),
	('B2', 'Blue', '2'),
	('B3', 'Blue', '3');



/*
 * 	MatchType values 	
 */
INSERT INTO MatchType (ID, name)
VALUES 	('Q', 'Qualification'),
	('P', 'Playoff'),
	('F', 'Final');



/*
 * 	MatchPeriod values 
 */
INSERT INTO MatchPeriod (ID, name)
VALUES	('A', 'Autonomous'),
	('T', 'Teleoperated');



/*
 * 	FaultType values 
 */
INSERT INTO FaultType (ID, name)
VALUES 	('NS', 'No Show'),
	('DA', 'Disable'),
	('DC', 'Disconnect'),
	('FA', 'Fall Over'),
	('FL', 'Foul'),
	('TF', 'Tech Foul');



/*
 * 	StartFinishType values 
 */
INSERT INTO StartFinishType (ID, name)
VALUES 	('S', 'Start Scouting'),
	('F', 'Finish Scouting');



------------------------------------------------------------------
--     filling in domain tables with season specific values     --
------------------------------------------------------------------

/*
 *	Domain tables hold values that do not change during the 
 *	season. 
 */

/*
 *	The following domain tables have values that are 
 *	specific to the 2023 Season. They relate to the specific
 * 	scoring mechanisms and game peices that are used in 
 *	the 'Charged Up' game. For future games, these values 
 * 	will need to be changed to reflect the new scoring 
 *	mechanisms.
 */

/*
 * 	GamePiece values 
 */
INSERT INTO GamePiece (ID, name)
VALUES 	('CN', 'Cone'),
	('CB', 'Cube');



/*
 * 	PickupLocation values
 */
INSERT INTO PickupLocation (ID, name)
VALUES 	('G', 'Ground'),
	('SS', 'Single Substation'),
	('DS', 'Double Substation');



/*
 * 	ScoringLocation	values
 */
INSERT INTO ScoringLocation (ID, level, position)
VALUES 	('L1', 'Low', '1'),
	('L2', 'Low', '2'),
	('L3', 'Low', '3'),
	('L4', 'Low', '4'),
	('L5', 'Low', '5'),
	('L6', 'Low', '6'),
	('L7', 'Low', '7'),
	('L8', 'Low', '8'),
	('L9', 'Low', '9'),

	('M1', 'Middle', '1'),
	('M2', 'Middle', '2'),
	('M3', 'Middle', '3'),
	('M4', 'Middle', '4'),
	('M5', 'Middle', '5'),
	('M6', 'Middle', '6'),
	('M7', 'Middle', '7'),
	('M8', 'Middle', '8'),
	('M9', 'Middle', '9'),

	('H1', 'High', '1'),
	('H2', 'High', '2'),
	('H3', 'High', '3'),
	('H4', 'High', '4'),
	('H5', 'High', '5'),
	('H6', 'High', '6'),
	('H7', 'High', '7'),
	('H8', 'High', '8'),
	('H9', 'High', '9');



/*
 * 	NonGamePieceScoringType	values 
 */
INSERT INTO NonGamePieceScoringType (ID, name)
VALUES 	('MB', 'Mobility'),
	('PK', 'Park'),
	('DK', 'Dock'),
	('EG', 'Engage');


/*
 * 	FaultType values 
 */
INSERT INTO FaultType (ID, name)
VALUES 	('DN', 'Drop Cone'),
	('DB', 'Drop Cube'),
	('FD', 'Fail To Dock');



-----------------------------------------------------------------
--   if needed - use the following commands to delete the DB   --
-----------------------------------------------------------------

/*
 * WARNING - This will delete all data inside the database!
 */

-- \c postgres
-- DROP DATABASE scoutingdb2023;



